import 'dart:io';
import 'dart:developer';
import 'dart:convert';
import 'package:path_provider/path_provider.dart';

/// Public Pass Server for Apple Wallet
///
/// This server serves .pkpass files using your Mac's IP address
/// so your iPhone can access them when scanning QR codes
class PublicPassServer {
  static HttpServer? _server;
  static final int _port = 8080;
  static String? _localIp;
  static String? _baseUrl;

  /// Start the public pass server
  static Future<String> startServer() async {
    try {
      if (_server != null) {
        log('üîÑ Public pass server already running on $_baseUrl');
        return _baseUrl!;
      }

      // Get local IP address
      _localIp = await _getLocalIpAddress();
      if (_localIp == null) {
        throw Exception('Could not determine local IP address');
      }

      _baseUrl = 'http://$_localIp:$_port';
      _server = await HttpServer.bind(InternetAddress.anyIPv4, _port);

      log('üöÄ Public pass server started on $_baseUrl');
      log('üì± Your iPhone can now access: $_baseUrl/passes/{passId}.pkpass');

      // Handle requests
      _server!.listen((HttpRequest request) {
        _handleRequest(request);
      });

      return _baseUrl!;
    } catch (e) {
      log('‚ùå Error starting public pass server: $e');
      rethrow;
    }
  }

  /// Stop the public pass server
  static Future<void> stopServer() async {
    if (_server != null) {
      await _server!.close();
      _server = null;
      _baseUrl = null;
      log('üõë Public pass server stopped');
    }
  }

  /// Get local IP address
  static Future<String?> _getLocalIpAddress() async {
    try {
      for (var interface in await NetworkInterface.list()) {
        for (var addr in interface.addresses) {
          if (addr.type == InternetAddressType.IPv4 && !addr.isLoopback) {
            log('üåê Found local IP: ${addr.address}');
            return addr.address;
          }
        }
      }
    } catch (e) {
      log('‚ùå Error getting local IP: $e');
    }
    return null;
  }

  /// Handle HTTP requests
  static void _handleRequest(HttpRequest request) {
    try {
      final uri = request.uri;
      log('üì• Request: ${request.method} ${uri.path} from ${request.connectionInfo?.remoteAddress}');

      if (uri.path.startsWith('/passes/') && uri.path.endsWith('.pkpass')) {
        _servePassFile(request);
      } else if (uri.path == '/') {
        _serveIndexPage(request);
      } else {
        _serve404(request);
      }
    } catch (e) {
      log('‚ùå Error handling request: $e');
      _serve500(request);
    }
  }

  /// Serve .pkpass files
  static void _servePassFile(HttpRequest request) async {
    try {
      final uri = request.uri;
      final passId = uri.path.split('/').last.replaceAll('.pkpass', '');

      // Look for the pass file in the app's documents directory
      final documentsDir = await getApplicationDocumentsDirectory();
      final passFile = File('${documentsDir.path}/passes/$passId.pkpass');

      if (await passFile.exists()) {
        final passBytes = await passFile.readAsBytes();

        request.response
          ..statusCode = 200
          ..headers.set('Content-Type', 'application/vnd.apple.pkpass')
          ..headers.set('Content-Disposition', 'attachment; filename="$passId.pkpass"')
          ..headers.set('Content-Length', passBytes.length)
          ..headers.set('Access-Control-Allow-Origin', '*')
          ..add(passBytes);

        await request.response.close();
        log('‚úÖ Served pass file: $passId.pkpass to ${request.connectionInfo?.remoteAddress}');
      } else {
        _serve404(request);
      }
    } catch (e) {
      log('‚ùå Error serving pass file: $e');
      _serve500(request);
    }
  }

  /// Serve index page
  static void _serveIndexPage(HttpRequest request) {
    final html = '''
<!DOCTYPE html>
<html>
<head>
    <title>Apple Wallet Pass Server</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; padding: 20px; }
        .container { max-width: 600px; margin: 0 auto; }
        .pass-link { display: block; padding: 10px; background: #007AFF; color: white; text-decoration: none; border-radius: 8px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üçé Apple Wallet Pass Server</h1>
        <p>Server is running on <strong>$_baseUrl</strong></p>
        <p>Pass files are served at: <code>/passes/{passId}.pkpass</code></p>
        <p>Your iPhone can access this server when scanning QR codes!</p>
        
        <h2>Available Passes:</h2>
        <p>Pass files will appear here when generated by the app.</p>
        
        <h2>Instructions:</h2>
        <ol>
            <li>Generate a loyalty card in the Flutter app</li>
            <li>Scan the QR code with your iPhone camera</li>
            <li>Apple Wallet will open and show the pass</li>
            <li>Tap "Add" to add to your Apple Wallet</li>
        </ol>
    </div>
</body>
</html>
    ''';

    request.response
      ..statusCode = 200
      ..headers.set('Content-Type', 'text/html')
      ..write(html);
    request.response.close();
  }

  /// Serve 404 error
  static void _serve404(HttpRequest request) {
    request.response
      ..statusCode = 404
      ..headers.set('Content-Type', 'text/plain')
      ..write('Pass not found');
    request.response.close();
  }

  /// Serve 500 error
  static void _serve500(HttpRequest request) {
    request.response
      ..statusCode = 500
      ..headers.set('Content-Type', 'text/plain')
      ..write('Internal server error');
    request.response.close();
  }

  /// Get server URL
  static String? get serverUrl => _baseUrl;

  /// Get local IP address
  static String? get localIp => _localIp;

  /// Check if server is running
  static bool get isRunning => _server != null;
}
